#pragma version 10

smart_contracts.poma.contract.Poma.approval_program:
    intcblock 0 1 4
    callsub __puya_arc4_router__
    return


// smart_contracts.poma.contract.Poma.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // smart_contracts/poma/contract.py:5
    // class Poma(ARC4Contract):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@7
    pushbytess 0x02bece11 0x3b6c3f57 0x4ae07b12 // method "hello(string)string", method "opt_in(uint64)void", method "send_reward(uint64,account,uint64)void"
    txna ApplicationArgs 0
    match __puya_arc4_router___hello_route@2 __puya_arc4_router___opt_in_route@3 __puya_arc4_router___send_reward_route@4
    intc_0 // 0
    retsub

__puya_arc4_router___hello_route@2:
    // smart_contracts/poma/contract.py:6
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/poma/contract.py:5
    // class Poma(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // smart_contracts/poma/contract.py:6
    // @abimethod()
    callsub hello
    dup
    len
    itob
    extract 6 2
    swap
    concat
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___opt_in_route@3:
    // smart_contracts/poma/contract.py:10
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/poma/contract.py:5
    // class Poma(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/poma/contract.py:10
    // @abimethod()
    callsub opt_in
    intc_1 // 1
    retsub

__puya_arc4_router___send_reward_route@4:
    // smart_contracts/poma/contract.py:20
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/poma/contract.py:5
    // class Poma(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    txna ApplicationArgs 3
    btoi
    // smart_contracts/poma/contract.py:20
    // @abimethod
    callsub send_reward
    intc_1 // 1
    retsub

__puya_arc4_router___bare_routing@7:
    // smart_contracts/poma/contract.py:5
    // class Poma(ARC4Contract):
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    retsub

__puya_arc4_router___after_if_else@11:
    // smart_contracts/poma/contract.py:5
    // class Poma(ARC4Contract):
    intc_0 // 0
    retsub


// smart_contracts.poma.contract.Poma.hello(name: bytes) -> bytes:
hello:
    // smart_contracts/poma/contract.py:6-7
    // @abimethod()
    // def hello(self, name: String) -> String:
    proto 1 1
    // smart_contracts/poma/contract.py:8
    // return "Hello, " + name
    pushbytes "Hello, "
    frame_dig -1
    concat
    retsub


// smart_contracts.poma.contract.Poma.opt_in(assetID: uint64) -> void:
opt_in:
    // smart_contracts/poma/contract.py:10-11
    // @abimethod()
    // def opt_in(self, assetID: UInt64) -> None:
    proto 1 0
    // smart_contracts/poma/contract.py:12-18
    // # Opt in to an asset
    // itxn.AssetTransfer(
    //     asset_amount=0,
    //     asset_receiver=Global.current_application_address,
    //     asset_sender=Global.current_application_address,
    //     xfer_asset=assetID,
    // ).submit()
    itxn_begin
    // smart_contracts/poma/contract.py:15
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/poma/contract.py:16
    // asset_sender=Global.current_application_address,
    dup
    frame_dig -1
    itxn_field XferAsset
    itxn_field AssetSender
    itxn_field AssetReceiver
    // smart_contracts/poma/contract.py:14
    // asset_amount=0,
    intc_0 // 0
    itxn_field AssetAmount
    // smart_contracts/poma/contract.py:12-13
    // # Opt in to an asset
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/poma/contract.py:12-18
    // # Opt in to an asset
    // itxn.AssetTransfer(
    //     asset_amount=0,
    //     asset_receiver=Global.current_application_address,
    //     asset_sender=Global.current_application_address,
    //     xfer_asset=assetID,
    // ).submit()
    itxn_submit
    retsub


// smart_contracts.poma.contract.Poma.send_reward(amount: uint64, receiver: bytes, asset_id: uint64) -> void:
send_reward:
    // smart_contracts/poma/contract.py:20-21
    // @abimethod
    // def send_reward(self, amount: UInt64, receiver: Account, asset_id: UInt64) -> None:
    proto 3 0
    // smart_contracts/poma/contract.py:22-28
    // # Send asset
    // itxn.AssetTransfer(
    //     asset_amount=amount,
    //     asset_receiver=receiver,
    //     asset_sender=Global.current_application_address,
    //     xfer_asset=asset_id,
    // ).submit()
    itxn_begin
    // smart_contracts/poma/contract.py:26
    // asset_sender=Global.current_application_address,
    global CurrentApplicationAddress
    frame_dig -1
    itxn_field XferAsset
    itxn_field AssetSender
    frame_dig -2
    itxn_field AssetReceiver
    frame_dig -3
    itxn_field AssetAmount
    // smart_contracts/poma/contract.py:22-23
    // # Send asset
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/poma/contract.py:22-28
    // # Send asset
    // itxn.AssetTransfer(
    //     asset_amount=amount,
    //     asset_receiver=receiver,
    //     asset_sender=Global.current_application_address,
    //     xfer_asset=asset_id,
    // ).submit()
    itxn_submit
    retsub
